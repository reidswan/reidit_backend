buildscript {
    ext.kotlin_version = '1.3.41'
    ext.ktor_version = '1.2.2'
    ext.slf4j_version = '1.6.1'
    ext.auth0_jwt_version = '3.8.1'
    ext.gson_version = '2.8.5'
    ext.exposed_version = '0.16.1'
    ext.postgresql_version = '42.2.6'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'idea'
    id 'application'
}

group 'com.reidswan.reidit'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "org.jetbrains.exposed:exposed:$exposed_version"
    implementation "org.postgresql:postgresql:$postgresql_version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.slf4j:slf4j-simple:$slf4j_version"
    implementation "io.ktor:ktor-network-tls:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "com.auth0:java-jwt:$auth0_jwt_version"
}

task generateCert(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.reidswan.reidit.prerun.GenerateSelfSignedCertificate'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

getTasksByName("run", false).first().dependsOn('generateCert')

run {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.reidswan.reidit.Main'
}

task startTestDb(type: Exec) {
    println "Init test DB"
    environment "PGPASSFILE", "${System.getProperty('user.dir')}/src/schema/.pgpass"
    environment "CONTAINER_NAME", "pg-test"
    environment "TEST", "true"
    commandLine 'sh', "${System.getProperty('user.dir')}/src/schema/psql-init.sh"
}

task stopTestDb(type: Exec) {
    println "Cleanup test DB"
    commandLine 'docker', 'stop', 'pg-test'
}

tasks.test.dependsOn("startTestDb")
tasks.test.finalizedBy("stopTestDb")

test {
    environment "NAMESPACE", "test"
    useJUnitPlatform()
}